<div class="max-w-7xl mx-auto">
  <!-- Header -->
  <div class="mb-6">
    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-4">
      <div class="flex-1">
        <h1 class="text-2xl sm:text-3xl font-bold text-gray-800 mb-2">
          <i class="fas fa-layer-group text-blue-600"></i> <%= set.name %>
        </h1>
        <% if (set.description) { %>
          <p class="text-sm sm:text-base text-gray-600"><%= set.description %></p>
        <% } %>
      </div>
      <div class="flex flex-wrap gap-2 sm:flex-nowrap sm:gap-2">
        <% if (set.source_set_id) { %>
          <!-- Cloned set: Show Update button, hide Edit button -->
          <form action="/shares/sets/<%= set.id %>/update-from-source" method="POST" onsubmit="return confirm('This will replace all flashcards with the latest from source. Your learning progress will be kept. Continue?');" class="flex-1 sm:flex-initial">
            <button type="submit" class="w-full sm:w-auto bg-purple-600 text-white px-3 sm:px-4 py-2 rounded-lg hover:bg-purple-700 text-sm whitespace-nowrap">
              <i class="fas fa-sync"></i> Update
            </button>
          </form>
        <% } else { %>
          <!-- Original set: Show Edit button -->
          <a href="/sets/<%= set.id %>/edit" class="flex-1 sm:flex-initial text-center bg-gray-200 text-gray-700 px-3 sm:px-4 py-2 rounded-lg hover:bg-gray-300 text-sm whitespace-nowrap">
            <i class="fas fa-edit"></i> Edit
          </a>
        <% } %>
        <a href="/shares/sets/<%= set.id %>/share" class="flex-1 sm:flex-initial text-center bg-green-600 text-white px-3 sm:px-4 py-2 rounded-lg hover:bg-green-700 text-sm whitespace-nowrap">
          <i class="fas fa-share-alt"></i> Share
        </a>
        <form action="/sets/<%= set.id %>/delete" method="POST" onsubmit="return confirm('Delete this set and all flashcards?');" class="flex-1 sm:flex-initial">
          <button type="submit" class="w-full sm:w-auto bg-red-500 text-white px-3 sm:px-4 py-2 rounded-lg hover:bg-red-600 text-sm whitespace-nowrap">
            <i class="fas fa-trash"></i> Delete
          </button>
        </form>
      </div>
    </div>
  </div>

  <!-- Stats -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
    <div class="bg-white p-4 rounded-lg shadow">
      <p class="text-gray-600 text-sm">Total Cards</p>
      <p class="text-2xl font-bold text-gray-800"><%= flashcards.length %></p>
    </div>
    <div class="bg-white p-4 rounded-lg shadow">
      <p class="text-gray-600 text-sm">Learned</p>
      <p class="text-2xl font-bold text-green-600"><%= stats.learned || 0 %></p>
    </div>
    <div class="bg-white p-4 rounded-lg shadow">
      <p class="text-gray-600 text-sm">Learning</p>
      <p class="text-2xl font-bold text-yellow-600"><%= stats.learning || 0 %></p>
    </div>
    <div class="bg-white p-4 rounded-lg shadow">
      <p class="text-gray-600 text-sm">New</p>
      <p class="text-2xl font-bold text-blue-600"><%= flashcards.length - (stats.learned || 0) %></p>
    </div>
  </div>

  <!-- Actions -->
  <div class="bg-white p-6 rounded-lg shadow mb-6">
    <h2 class="text-xl font-bold text-gray-800 mb-4">
      <i class="fas fa-bolt text-yellow-500"></i> Study Options
    </h2>
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <a href="/sets/<%= set.id %>/study" class="bg-blue-500 text-white px-4 py-3 rounded-lg hover:bg-blue-600 transition text-center">
        <i class="fas fa-brain"></i> Long-term Learning
      </a>
      <a href="/sets/<%= set.id %>/random?type=all" class="bg-green-500 text-white px-4 py-3 rounded-lg hover:bg-green-600 transition text-center">
        <i class="fas fa-random"></i> Random All
      </a>
      <a href="/sets/<%= set.id %>/random?type=starred" class="bg-purple-500 text-white px-4 py-3 rounded-lg hover:bg-purple-600 transition text-center">
        <i class="fas fa-star"></i> Random Starred
      </a>
      <a href="/sets/<%= set.id %>/import" class="bg-indigo-500 text-white px-4 py-3 rounded-lg hover:bg-indigo-600 transition text-center">
        <i class="fas fa-file-import"></i> Import Cards
      </a>
    </div>
  </div>

  <!-- Flashcards -->
  <div class="bg-white p-4 sm:p-6 rounded-lg shadow">
    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3 sm:gap-0 mb-4">
      <h2 class="text-lg sm:text-xl font-bold text-gray-800">
        <i class="fas fa-cards text-blue-500"></i> Flashcards (<%= flashcards.length %>)
      </h2>
      <div class="flex flex-wrap gap-2">
        <% if (set.source_set_id) { %>
          <!-- Cloned set: Only show Export if allowed -->
          <% if (set.allow_export) { %>
            <a href="/sets/<%= set.id %>/export" class="flex-1 xs:flex-initial text-center bg-gray-200 text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-300 text-sm whitespace-nowrap">
              <i class="fas fa-download"></i> Export
            </a>
          <% } else { %>
            <span class="flex-1 xs:flex-initial text-center bg-gray-100 text-gray-400 px-3 py-2 rounded-lg text-sm cursor-not-allowed whitespace-nowrap" title="Export disabled by owner">
              <i class="fas fa-lock"></i> Locked
            </span>
          <% } %>
          <!-- No Import/Add Card buttons for cloned sets -->
        <% } else { %>
          <!-- Original set: Show all buttons -->
          <a href="/sets/<%= set.id %>/export" class="flex-1 xs:flex-initial text-center bg-gray-200 text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-300 text-sm whitespace-nowrap">
            <i class="fas fa-download"></i> Export
          </a>
          <button onclick="toggleImportForm()" class="flex-1 xs:flex-initial bg-green-600 text-white px-3 py-2 rounded-lg hover:bg-green-700 text-sm whitespace-nowrap">
            <i class="fas fa-file-import"></i> Import
          </button>
          <button onclick="toggleMarkdownImportForm()" class="flex-1 xs:flex-initial bg-purple-600 text-white px-3 py-2 rounded-lg hover:bg-purple-700 text-sm whitespace-nowrap">
            <i class="fab fa-markdown"></i> MD
          </button>
          <a href="/flashcards/create/<%= set.id %>" class="flex-1 xs:flex-initial text-center bg-blue-600 text-white px-3 py-2 rounded-lg hover:bg-blue-700 text-sm whitespace-nowrap">
            <i class="fas fa-plus"></i> Add Card
          </a>
        <% } %>
      </div>
    </div>

    <!-- Import Form (collapsible) -->
    <div id="importFormContainer" class="mb-6 hidden">
      <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
        <p class="text-sm text-gray-700 mb-2">
          <strong>Import Format:</strong> Use <code class="bg-white px-1 rounded">XXX</code> to separate term/definition, <code class="bg-white px-1 rounded">YYY</code> for notes, <code class="bg-white px-1 rounded">ZZZ</code> between flashcards.
        </p>
        <div class="bg-white p-3 rounded mt-2">
          <p class="text-xs font-semibold text-gray-700 mb-1">Example - Simple:</p>
          <code class="text-xs block text-gray-800 whitespace-pre-wrap font-mono">HelloXXXXin chàoYYYGreeting phraseZZZThank youXXXCảm ơnYYYPolite expression</code>
        </div>
        <div class="bg-white p-3 rounded mt-2">
          <p class="text-xs font-semibold text-gray-700 mb-1">Example - Multi-choice (correct answer marked with XXX):</p>
          <code class="text-xs block text-gray-800 whitespace-pre-wrap font-mono">What is AWS?
A. Database
B. Operating System
XXXC. Cloud Platform
D. Programming LanguageYYYAWS basicsZZZWhat is EC2?
A. Storage service
XXXB. Compute service
C. Database service</code>
        </div>
      </div>

      <form action="/sets/<%= set.id %>/import" method="POST">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div>
            <label for="termDefinitionSeparator" class="block text-gray-700 font-semibold mb-2 text-sm">
              Term/Definition Separator
            </label>
            <input 
              type="text" 
              id="termDefinitionSeparator" 
              name="termDefinitionSeparator"
              value="XXX"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 text-sm"
              required
            >
          </div>

          <div>
            <label for="noteSeparator" class="block text-gray-700 font-semibold mb-2 text-sm">
              Note Separator
            </label>
            <input 
              type="text" 
              id="noteSeparator" 
              name="noteSeparator"
              value="YYY"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 text-sm"
            >
          </div>

          <div>
            <label for="flashcardSeparator" class="block text-gray-700 font-semibold mb-2 text-sm">
              Flashcard Separator
            </label>
            <input 
              type="text" 
              id="flashcardSeparator" 
              name="flashcardSeparator"
              value="ZZZ"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 text-sm"
              required
            >
          </div>
        </div>

        <div class="mb-4">
          <div class="flex justify-between items-center mb-2">
            <label for="content" class="block text-gray-700 font-semibold text-sm">
              Flashcard Data
            </label>
            <button 
              type="button"
              onclick="generatePreview()"
              class="text-sm bg-blue-100 hover:bg-blue-200 text-blue-700 px-3 py-1 rounded transition"
            >
              <i class="fas fa-sync"></i> Preview
            </button>
          </div>
          <textarea 
            id="content" 
            name="content" 
            rows="10"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 font-mono text-sm"
            required
            placeholder="Paste your flashcard data here..."
          ></textarea>
        </div>

        <div id="previewContainer" class="mb-4 hidden">
          <div class="flex justify-between items-center mb-2">
            <label class="block text-gray-700 font-semibold text-sm">Preview</label>
            <span id="previewCount" class="text-sm text-gray-600">0 flashcards</span>
          </div>
          <div id="preview" class="border border-gray-300 rounded-lg p-4 bg-gray-50 max-h-[300px] overflow-y-auto"></div>
        </div>

        <div class="flex space-x-2">
          <button 
            type="submit" 
            class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition text-sm"
          >
            <i class="fas fa-check"></i> Import
          </button>
          <button 
            type="button"
            onclick="toggleImportForm()"
            class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition text-sm"
          >
            <i class="fas fa-times"></i> Cancel
          </button>
        </div>
      </form>
    </div>

    <!-- Markdown Import Form (collapsible) -->
    <div id="markdownImportFormContainer" class="mb-6 hidden">
      <div class="bg-purple-50 border-l-4 border-purple-500 p-4 mb-4">
        <p class="text-sm text-gray-700 mb-2">
          <strong>Markdown Format:</strong> Paste markdown questions with <code class="bg-white px-1 rounded">###</code> heading and checkbox list format.
        </p>
        <div class="bg-white p-3 rounded mt-2">
          <p class="text-xs font-semibold text-gray-700 mb-1">Example format:</p>
          <code class="text-xs block text-gray-800 whitespace-pre-wrap font-mono">### Question text here?

- [ ] Wrong option A
- [x] Correct option B
- [ ] Wrong option C
- [x] Correct option D

### Another question?

- [x] Correct answer
- [ ] Wrong answer</code>
        </div>
        <p class="text-xs text-gray-600 mt-2">
          <strong>Note:</strong> Questions with <code class="bg-white px-1 rounded">[x]</code> are marked as correct answers.
        </p>
      </div>

      <form action="/sets/<%= set.id %>/import-markdown" method="POST">
        <div class="mb-4">
          <div class="flex justify-between items-center mb-2">
            <label for="markdownContent" class="block text-gray-700 font-semibold text-sm">
              Markdown Questions
            </label>
            <button 
              type="button"
              onclick="generateMarkdownPreview()"
              class="text-sm bg-purple-100 hover:bg-purple-200 text-purple-700 px-3 py-1 rounded transition"
            >
              <i class="fas fa-sync"></i> Preview
            </button>
          </div>
          <textarea 
            id="markdownContent" 
            name="content" 
            rows="15"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-purple-500 font-mono text-sm"
            required
            placeholder="Paste your markdown questions here..."
          ></textarea>
        </div>

        <div id="markdownPreviewContainer" class="mb-4 hidden">
          <div class="flex justify-between items-center mb-2">
            <label class="block text-gray-700 font-semibold text-sm">Preview</label>
            <span id="markdownPreviewCount" class="text-sm text-gray-600">0 flashcards</span>
          </div>
          <div id="markdownPreview" class="border border-gray-300 rounded-lg p-4 bg-gray-50 max-h-[300px] overflow-y-auto"></div>
        </div>

        <div class="flex space-x-2">
          <button 
            type="submit" 
            class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition text-sm"
          >
            <i class="fas fa-check"></i> Import
          </button>
          <button 
            type="button"
            onclick="toggleMarkdownImportForm()"
            class="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition text-sm"
          >
            <i class="fas fa-times"></i> Cancel
          </button>
        </div>
      </form>
    </div>

    <% if (flashcards.length === 0) { %>
      <div class="text-center py-12 text-gray-500">
        <i class="fas fa-inbox text-4xl mb-4"></i>
        <p class="mb-4">No flashcards yet. Add your first card!</p>
        <div class="space-x-4">
          <a href="/flashcards/create/<%= set.id %>" class="inline-block bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700">
            <i class="fas fa-plus"></i> Create Flashcard
          </a>
          <a href="/sets/<%= set.id %>/import" class="inline-block bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700">
            <i class="fas fa-file-import"></i> Import from Text
          </a>
        </div>
      </div>
    <% } else { %>
      <div class="space-y-3">
        <% flashcards.forEach((card, index) => { %>
          <div class="border rounded-lg p-4 hover:bg-gray-50 transition">
            <div class="flex items-start justify-between">
              <div class="flex-1 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p class="text-xs text-gray-500 mb-1">TERM</p>
                  <p class="font-semibold text-gray-800 whitespace-pre-wrap"><%= card.word %></p>
                </div>
                <div>
                  <p class="text-xs text-gray-500 mb-1">DEFINITION</p>
                  <p class="text-gray-700 whitespace-pre-wrap"><%= card.definition %></p>
                </div>
              </div>
              <div class="flex items-center space-x-2 ml-4">
                <button 
                  onclick="toggleStar(<%= card.id %>, this)"
                  class="text-2xl transition <%= card.is_starred ? 'text-yellow-500' : 'text-gray-300' %> hover:text-yellow-500"
                >
                  <i class="fas fa-star"></i>
                </button>
                <% if (!set.source_set_id) { %>
                  <!-- Only show edit/delete for original sets -->
                  <a href="/flashcards/<%= card.id %>/edit" class="text-blue-600 hover:text-blue-700">
                    <i class="fas fa-edit"></i>
                  </a>
                  <form action="/flashcards/<%= card.id %>/delete" method="POST" onsubmit="return confirm('Delete this flashcard?');" class="inline">
                    <button type="submit" class="text-red-600 hover:text-red-700">
                      <i class="fas fa-trash"></i>
                    </button>
                  </form>
                <% } %>
              </div>
            </div>
          </div>
        <% }); %>
      </div>
    <% } %>
  </div>
</div>

<script>
  function toggleStar(cardId, btn) {
    fetch(`/flashcards/${cardId}/toggle-star`, {
      method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Force immediate visual update
        if (btn.classList.contains('text-yellow-500')) {
          btn.classList.remove('text-yellow-500');
          btn.classList.add('text-gray-300');
        } else {
          btn.classList.remove('text-gray-300');
          btn.classList.add('text-yellow-500');
        }
        
        // Force repaint
        btn.offsetHeight;
      }
    })
    .catch(error => console.error('Error:', error));
  }

  function toggleImportForm() {
    const container = document.getElementById('importFormContainer');
    container.classList.toggle('hidden');
    
    // Clear form when hiding
    if (container.classList.contains('hidden')) {
      document.getElementById('content').value = '';
      document.getElementById('previewContainer').classList.add('hidden');
    }
  }

  function getSeparators() {
    const termDefSep = document.getElementById('termDefinitionSeparator').value;
    const noteSep = document.getElementById('noteSeparator').value;
    const flashcardSep = document.getElementById('flashcardSeparator').value;
    
    return {
      termDef: termDefSep === '\\t' || termDefSep.toLowerCase() === 'tab' ? '\t' : termDefSep,
      note: noteSep === '\\t' || noteSep.toLowerCase() === 'tab' ? '\t' : noteSep,
      flashcard: flashcardSep === '\\n\\n' ? '\n\n' : flashcardSep
    };
  }

  function parseMultiChoice(text) {
    // Multi-choice format parser
    // Example:
    // What is AWS?
    // A. Database
    // B. Operating System
    // XXXC. Cloud Platform  <- Correct answer marked with XXX
    // D. Programming Language
    
    const lines = text.split('\n').map(l => l.trim()).filter(l => l);
    if (lines.length === 0) return null;
    
    // First line is the question
    const question = lines[0];
    const options = [];
    let correctAnswer = null;
    
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i];
      
      // Check if line starts with XXX (marked as correct)
      if (line.startsWith('XXX')) {
        const cleanLine = line.substring(3).trim();
        // Extract option letter and text (e.g., "C. Cloud Platform")
        const match = cleanLine.match(/^([A-Z])\.\s*(.+)/);
        if (match) {
          correctAnswer = match[1];
          options.push(`${match[1]}. ${match[2]}`);
        }
      } else {
        // Regular option
        const match = line.match(/^([A-Z])\.\s*(.+)/);
        if (match) {
          options.push(line);
        }
      }
    }
    
    // Check if this looks like a multi-choice question
    if (options.length >= 2 && correctAnswer) {
      const term = question;
      const definition = options.join('\n') + '\n\n✓ Correct: ' + correctAnswer;
      return { term, definition, isMultiChoice: true };
    }
    
    return null;
  }

  function generatePreview() {
    const content = document.getElementById('content').value;
    const separators = getSeparators();
    const preview = document.getElementById('preview');
    const previewCount = document.getElementById('previewCount');
    const previewContainer = document.getElementById('previewContainer');
    
    if (!content.trim()) {
      previewContainer.classList.add('hidden');
      return;
    }
    
    previewContainer.classList.remove('hidden');
    
    // Split by flashcard separator
    const flashcardBlocks = content.split(separators.flashcard).filter(block => block.trim());
    const flashcards = [];
    
    flashcardBlocks.forEach((block, index) => {
      block = block.trim();
      
      // Try multi-choice parser first
      const multiChoice = parseMultiChoice(block);
      if (multiChoice) {
        flashcards.push({
          term: multiChoice.term,
          definition: multiChoice.definition,
          note: '',
          isMultiChoice: true
        });
        return;
      }
      
      // Regular parsing with separators
      const parts = block.split(separators.termDef);
      
      if (parts.length >= 2) {
        const term = parts[0].trim();
        let definition = '';
        let note = '';
        
        // Everything after first separator
        const remaining = parts.slice(1).join(separators.termDef);
        
        // Check for note separator
        if (separators.note && remaining.includes(separators.note)) {
          const defNoteParts = remaining.split(separators.note);
          definition = defNoteParts[0].trim();
          note = defNoteParts.slice(1).join(separators.note).trim();
        } else {
          definition = remaining.trim();
        }
        
        if (term && definition) {
          flashcards.push({ term, definition, note, isMultiChoice: false });
        }
      }
    });
    
    if (flashcards.length === 0) {
      preview.innerHTML = '<p class="text-red-500 text-sm"><i class="fas fa-exclamation-triangle"></i> No valid flashcards found. Check your separator settings.</p>';
      previewCount.textContent = '0 flashcards';
      return;
    }
    
    let html = '<div class="space-y-3">';
    const displayCount = Math.min(flashcards.length, 10);
    
    for (let i = 0; i < displayCount; i++) {
      const card = flashcards[i];
      const multiChoiceBadge = card.isMultiChoice 
        ? '<span class="bg-purple-100 text-purple-800 text-xs font-semibold px-2 py-1 rounded ml-2">Multi-Choice</span>'
        : '';
      
      html += `
        <div class="bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
          <div class="flex items-start mb-2">
            <span class="bg-blue-100 text-blue-800 text-xs font-semibold px-2 py-1 rounded">#${i + 1}</span>
            ${multiChoiceBadge}
          </div>
          <div class="text-sm mb-2">
            <span class="font-semibold text-gray-700">Term:</span>
            <div class="mt-1 text-gray-900 bg-gray-50 p-2 rounded whitespace-pre-wrap">${escapeHtml(card.term)}</div>
          </div>
          <div class="text-sm mb-2">
            <span class="font-semibold text-gray-700">Definition:</span>
            <div class="mt-1 text-gray-900 bg-gray-50 p-2 rounded whitespace-pre-wrap">${escapeHtml(card.definition)}</div>
          </div>
          ${card.note ? `
            <div class="text-sm">
              <span class="font-semibold text-gray-700">Note:</span>
              <div class="mt-1 text-gray-600 italic bg-yellow-50 p-2 rounded border-l-4 border-yellow-400">${escapeHtml(card.note)}</div>
            </div>
          ` : ''}
        </div>
      `;
    }
    
    if (flashcards.length > displayCount) {
      html += `
        <div class="text-center p-4 bg-gray-50 rounded border border-gray-200">
          <p class="text-sm text-gray-600 font-semibold">
            <i class="fas fa-ellipsis-h"></i> and ${flashcards.length - displayCount} more flashcard(s)
          </p>
        </div>
      `;
    }
    
    html += '</div>';
    preview.innerHTML = html;
    
    const countColor = flashcards.length > 0 ? 'text-green-600' : 'text-gray-600';
    previewCount.innerHTML = `<span class="${countColor}"><i class="fas fa-check-circle"></i> ${flashcards.length} flashcard${flashcards.length !== 1 ? 's' : ''}</span>`;
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function toggleMarkdownImportForm() {
    const container = document.getElementById('markdownImportFormContainer');
    const otherContainer = document.getElementById('importFormContainer');
    
    // Hide other import form if open
    if (!container.classList.contains('hidden')) {
      container.classList.add('hidden');
    } else {
      otherContainer.classList.add('hidden');
      container.classList.remove('hidden');
    }
    
    // Clear form when hiding
    if (container.classList.contains('hidden')) {
      document.getElementById('markdownContent').value = '';
      document.getElementById('markdownPreviewContainer').classList.add('hidden');
    }
  }

  function parseMarkdownQuestions(text) {
    // Parse markdown format:
    // ### Question
    // - [ ] Option A
    // - [x] Correct Option B
    // - [ ] Option C
    // Optional note after options
    
    const flashcards = [];
    
    // Split by ### to get questions
    const questionBlocks = text.split(/###\s+/).filter(block => block.trim());
    
    questionBlocks.forEach(block => {
      const lines = block.split('\n').map(l => l.trim()).filter(l => l);
      if (lines.length === 0) return;
      
      // First line is the question
      const question = lines[0].replace(/\?$/, '').trim() + '?';
      
      const options = [];
      const correctOptions = [];
      let note = '';
      let optionsEnded = false;
      
      // Parse options (lines starting with - [ ] or - [x])
      for (let i = 1; i < lines.length; i++) {
        const line = lines[i];
        
        // Check for checkbox format
        const checkedMatch = line.match(/^-\s*\[x\]\s*(.+)/i);
        const uncheckedMatch = line.match(/^-\s*\[\s*\]\s*(.+)/i);
        
        if (checkedMatch) {
          const optionText = checkedMatch[1].trim();
          const letter = String.fromCharCode(65 + options.length); // A, B, C, D...
          options.push(`${letter}. ${optionText}`);
          correctOptions.push(letter);
        } else if (uncheckedMatch) {
          const optionText = uncheckedMatch[1].trim();
          const letter = String.fromCharCode(65 + options.length);
          options.push(`${letter}. ${optionText}`);
        } else if (line.startsWith('###')) {
          // Start of next question
          break;
        } else if (options.length > 0) {
          // Any text after options = note
          note += (note ? ' ' : '') + line;
        }
      }
      
      if (options.length >= 2 && correctOptions.length > 0) {
        // Build TERM: Question + Options + Note (if exists)
        let term = question + '\n' + options.join('\n');
        if (note) {
          term += 'YYY' + note;
        }
        
        // Build DEFINITION: Correct: A or Correct: A, C
        const definition = 'Correct: ' + correctOptions.join(', ');
        
        flashcards.push({
          term,
          definition,
          correctAnswers: correctOptions,
          isMultiChoice: true
        });
      }
    });
    
    return flashcards;
  }

  function generateMarkdownPreview() {
    const content = document.getElementById('markdownContent').value;
    const preview = document.getElementById('markdownPreview');
    const previewCount = document.getElementById('markdownPreviewCount');
    const previewContainer = document.getElementById('markdownPreviewContainer');
    
    if (!content.trim()) {
      previewContainer.classList.add('hidden');
      return;
    }
    
    previewContainer.classList.remove('hidden');
    
    const flashcards = parseMarkdownQuestions(content);
    
    if (flashcards.length === 0) {
      preview.innerHTML = '<p class="text-red-500 text-sm"><i class="fas fa-exclamation-triangle"></i> No valid questions found. Check your markdown format.</p>';
      previewCount.textContent = '0 flashcards';
      return;
    }
    
    let html = '<div class="space-y-3">';
    const displayCount = Math.min(flashcards.length, 10);
    
    for (let i = 0; i < displayCount; i++) {
      const card = flashcards[i];
      
      html += `
        <div class="bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
          <div class="flex items-start mb-2">
            <span class="bg-purple-100 text-purple-800 text-xs font-semibold px-2 py-1 rounded">#${i + 1}</span>
            <span class="bg-green-100 text-green-800 text-xs font-semibold px-2 py-1 rounded ml-2">Multi-Choice</span>
            <span class="bg-blue-100 text-blue-800 text-xs font-semibold px-2 py-1 rounded ml-2">${card.correctAnswers.length} correct</span>
          </div>
          <div class="text-sm mb-2">
            <span class="font-semibold text-gray-700">Question:</span>
            <div class="mt-1 text-gray-900 bg-gray-50 p-2 rounded whitespace-pre-wrap">${escapeHtml(card.term)}</div>
          </div>
          <div class="text-sm">
            <span class="font-semibold text-gray-700">Options & Answer:</span>
            <div class="mt-1 text-gray-900 bg-gray-50 p-2 rounded whitespace-pre-wrap">${escapeHtml(card.definition)}</div>
          </div>
        </div>
      `;
    }
    
    if (flashcards.length > displayCount) {
      html += `
        <div class="text-center p-4 bg-gray-50 rounded border border-gray-200">
          <p class="text-sm text-gray-600 font-semibold">
            <i class="fas fa-ellipsis-h"></i> and ${flashcards.length - displayCount} more question(s)
          </p>
        </div>
      `;
    }
    
    html += '</div>';
    preview.innerHTML = html;
    
    const countColor = flashcards.length > 0 ? 'text-green-600' : 'text-gray-600';
    previewCount.innerHTML = `<span class="${countColor}"><i class="fas fa-check-circle"></i> ${flashcards.length} question${flashcards.length !== 1 ? 's' : ''}</span>`;
  }
</script>
